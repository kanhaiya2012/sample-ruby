# pepipost
#
# This file was automatically generated by APIMATIC v2.0 (
# https://apimatic.io ).

module Pepipost
  # Master modal
  class Send < BaseModel
    # email address which recipients can reply to.
    # @return [String]
    attr_accessor :reply_to

    # email address representing the sender of the mail
    # @return [From]
    attr_accessor :from

    # Subject line of the email
    # @return [String]
    attr_accessor :subject

    # ID of the template to be used for sending the mail
    # @return [Long]
    attr_accessor :template_id

    # content in text/plain format
    # @return [List of Content]
    attr_accessor :content

    # attachment information
    # @return [List of Attachments]
    attr_accessor :attachments

    # to recipient with some personalized data like to address, attachments and
    # attributes
    # @return [List of Personalizations]
    attr_accessor :personalizations

    # Enable/Disable settings like click, open and unsubscribe track
    # @return [Settings]
    attr_accessor :settings

    # define custom tags to organize your emails
    # @return [List of String]
    attr_accessor :tags

    # define custom tags to organize your emails
    # @return [Boolean]
    attr_accessor :lint_payload

    # schedule the time of email delivery
    # @return [Long]
    attr_accessor :schedule

    # Global bcc can be defined here
    # @return [List of EmailStruct]
    attr_accessor :bcc

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['reply_to'] = 'reply_to'
      @_hash['from'] = 'from'
      @_hash['subject'] = 'subject'
      @_hash['template_id'] = 'template_id'
      @_hash['content'] = 'content'
      @_hash['attachments'] = 'attachments'
      @_hash['personalizations'] = 'personalizations'
      @_hash['settings'] = 'settings'
      @_hash['tags'] = 'tags'
      @_hash['lint_payload'] = 'lint_payload'
      @_hash['schedule'] = 'schedule'
      @_hash['bcc'] = 'bcc'
      @_hash
    end

    def initialize(from = nil,
                   subject = nil,
                   content = nil,
                   personalizations = nil,
                   reply_to = nil,
                   template_id = nil,
                   attachments = nil,
                   settings = nil,
                   tags = nil,
                   lint_payload = nil,
                   schedule = nil,
                   bcc = nil)
      @reply_to = reply_to
      @from = from
      @subject = subject
      @template_id = template_id
      @content = content
      @attachments = attachments
      @personalizations = personalizations
      @settings = settings
      @tags = tags
      @lint_payload = lint_payload
      @schedule = schedule
      @bcc = bcc
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      from = From.from_hash(hash['from']) if hash['from']
      subject = hash['subject']
      # Parameter is an array, so we need to iterate through it
      content = nil
      unless hash['content'].nil?
        content = []
        hash['content'].each do |structure|
          content << (Content.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      personalizations = nil
      unless hash['personalizations'].nil?
        personalizations = []
        hash['personalizations'].each do |structure|
          personalizations << (Personalizations.from_hash(structure) if structure)
        end
      end
      reply_to = hash['reply_to']
      template_id = hash['template_id']
      # Parameter is an array, so we need to iterate through it
      attachments = nil
      unless hash['attachments'].nil?
        attachments = []
        hash['attachments'].each do |structure|
          attachments << (Attachments.from_hash(structure) if structure)
        end
      end
      settings = Settings.from_hash(hash['settings']) if hash['settings']
      tags = hash['tags']
      lint_payload = hash['lint_payload']
      schedule = hash['schedule']
      # Parameter is an array, so we need to iterate through it
      bcc = nil
      unless hash['bcc'].nil?
        bcc = []
        hash['bcc'].each do |structure|
          bcc << (EmailStruct.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      Send.new(from,
               subject,
               content,
               personalizations,
               reply_to,
               template_id,
               attachments,
               settings,
               tags,
               lint_payload,
               schedule,
               bcc)
    end
  end
end
