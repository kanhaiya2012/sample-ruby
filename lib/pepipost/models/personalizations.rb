# pepipost
#
# This file was automatically generated by APIMATIC v2.0 (
# https://apimatic.io ).

module Pepipost
  # Personalizations
  class Personalizations < BaseModel
    # Dynamic attributes
    # @return [Object]
    attr_accessor :attributes

    # Dynamic headers attributes
    # @return [Object]
    attr_accessor :headers

    # Attachments to individuals recipient
    # @return [List of Attachments]
    attr_accessor :attachments

    # To email-address
    # @return [List of EmailStruct]
    attr_accessor :to

    # CC email-address
    # @return [List of EmailStruct]
    attr_accessor :cc

    # Bcc email-addresses
    # @return [List of EmailStruct]
    attr_accessor :bcc

    # token to which is json string
    # @return [String]
    attr_accessor :token_to

    # token cc which is json string
    # @return [String]
    attr_accessor :token_cc

    # token bcc which is json string
    # @return [String]
    attr_accessor :token_bcc

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['attributes'] = 'attributes'
      @_hash['headers'] = 'headers'
      @_hash['attachments'] = 'attachments'
      @_hash['to'] = 'to'
      @_hash['cc'] = 'cc'
      @_hash['bcc'] = 'bcc'
      @_hash['token_to'] = 'token_to'
      @_hash['token_cc'] = 'token_cc'
      @_hash['token_bcc'] = 'token_bcc'
      @_hash
    end

    def initialize(to = nil,
                   attributes = nil,
                   headers = nil,
                   attachments = nil,
                   cc = nil,
                   bcc = nil,
                   token_to = nil,
                   token_cc = nil,
                   token_bcc = nil)
      @attributes = attributes
      @headers = headers
      @attachments = attachments
      @to = to
      @cc = cc
      @bcc = bcc
      @token_to = token_to
      @token_cc = token_cc
      @token_bcc = token_bcc
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      to = nil
      unless hash['to'].nil?
        to = []
        hash['to'].each do |structure|
          to << (EmailStruct.from_hash(structure) if structure)
        end
      end
      attributes = hash['attributes']
      headers = hash['headers']
      # Parameter is an array, so we need to iterate through it
      attachments = nil
      unless hash['attachments'].nil?
        attachments = []
        hash['attachments'].each do |structure|
          attachments << (Attachments.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      cc = nil
      unless hash['cc'].nil?
        cc = []
        hash['cc'].each do |structure|
          cc << (EmailStruct.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      bcc = nil
      unless hash['bcc'].nil?
        bcc = []
        hash['bcc'].each do |structure|
          bcc << (EmailStruct.from_hash(structure) if structure)
        end
      end
      token_to = hash['token_to']
      token_cc = hash['token_cc']
      token_bcc = hash['token_bcc']

      # Create object from extracted values.
      Personalizations.new(to,
                           attributes,
                           headers,
                           attachments,
                           cc,
                           bcc,
                           token_to,
                           token_cc,
                           token_bcc)
    end
  end
end
