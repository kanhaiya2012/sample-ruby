# pepipost
#
# This file was automatically generated by APIMATIC v2.0 (
# https://apimatic.io ).

module Pepipost
  # Settings Model.
  class Settings < BaseModel
    # enable or disable footer
    # @return [Boolean]
    attr_accessor :footer

    # enable or disable click tracking
    # @return [Boolean]
    attr_accessor :click_track

    # enable or disable open tracking
    # @return [Boolean]
    attr_accessor :open_track

    # enable or disable unsubscribe tracking
    # @return [Boolean]
    attr_accessor :unsubscribe_track

    # email address for bcc
    # @return [List of EmailStruct]
    attr_accessor :bcc

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['footer'] = 'footer'
      @_hash['click_track'] = 'click_track'
      @_hash['open_track'] = 'open_track'
      @_hash['unsubscribe_track'] = 'unsubscribe_track'
      @_hash['bcc'] = 'bcc'
      @_hash
    end

    def initialize(footer = nil,
                   click_track = nil,
                   open_track = nil,
                   unsubscribe_track = nil,
                   bcc = nil)
      @footer = footer
      @click_track = click_track
      @open_track = open_track
      @unsubscribe_track = unsubscribe_track
      @bcc = bcc
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      footer = hash['footer']
      click_track = hash['click_track']
      open_track = hash['open_track']
      unsubscribe_track = hash['unsubscribe_track']
      # Parameter is an array, so we need to iterate through it
      bcc = nil
      unless hash['bcc'].nil?
        bcc = []
        hash['bcc'].each do |structure|
          bcc << (EmailStruct.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      Settings.new(footer,
                   click_track,
                   open_track,
                   unsubscribe_track,
                   bcc)
    end
  end
end
