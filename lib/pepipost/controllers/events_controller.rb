# pepipost
#
# This file was automatically generated by APIMATIC v2.0 (
# https://apimatic.io ).

module Pepipost
  # EventsController
  class EventsController < BaseController
    @instance = EventsController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Lets you to retrieve the email transaction logs.
    # @param [Date] startdate Required parameter: The starting date of the
    # statistics to retrieve. Must follow format YYYY-MM-DD.
    # @param [EventsEnum] events Optional parameter: Filter based on different
    # email events. If not passed, all events will be fetched. Multiple comma
    # separated events are allowed
    # @param [SortEnum] sort Optional parameter: Sort based on email sent time
    # @param [Date] enddate Optional parameter: The end date of the statistics
    # to retrieve. Defaults to today. Must follow format YYYY-MM-DD
    # @param [Integer] offset Optional parameter: The point in the list to begin
    # retrieving results.
    # @param [Integer] limit Optional parameter: The number of results to
    # return.
    # @param [String] subject Optional parameter: Filter logs based on subject
    # @param [String] xapiheader Optional parameter: Filter logs based on
    # recipient's email
    # @param [String] fromaddress Optional parameter: Filter logs based on
    # fromaddress
    # @param [String] email Optional parameter: Filter logs based on recipient's
    # email
    # @return Object response from the API call
    def get_events_get(startdate,
                       events = nil,
                       sort = nil,
                       enddate = nil,
                       offset = 0,
                       limit = 10,
                       subject = nil,
                       xapiheader = nil,
                       fromaddress = nil,
                       email = nil)
      # Prepare query url.
      _path_url = '/events'
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'startdate' => startdate,
          'events' => events,
          'sort' => sort,
          'enddate' => enddate,
          'offset' => offset,
          'limit' => limit,
          'subject' => subject,
          'xapiheader' => xapiheader,
          'fromaddress' => fromaddress,
          'email' => email
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url
      )
      CustomHeaderAuth.apply(_request)
      _context = execute_request(_request)
      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise APIException.new(
          'API Response',
          _context
        )
      elsif _context.response.status_code == 401
        raise APIException.new(
          'API Response',
          _context
        )
      elsif _context.response.status_code == 403
        raise APIException.new(
          'API Response',
          _context
        )
      elsif _context.response.status_code == 405
        raise APIException.new(
          'Invalid input',
          _context
        )
      end
      validate_response(_context)
      # Return appropriate response type.
      _context.response.raw_body
    end
  end
end
