# pepipost
#
# This file was automatically generated by APIMATIC v2.0 (
# https://apimatic.io ).

module Pepipost
  # StatsController
  class StatsController < BaseController
    @instance = StatsController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Lets you fetch all the subaccounts created by you
    # @param [Date] startdate Required parameter: The starting date of the
    # statistics to retrieve. Must follow format YYYY-MM-DD.
    # @param [Date] enddate Optional parameter: The end date of the statistics
    # to retrieve. Defaults to today. Must follow format YYYY-MM-DD.
    # @param [AggregatedByEnum] aggregated_by Optional parameter: Example:
    # @param [Integer] offset Optional parameter: Example:1
    # @param [Integer] limit Optional parameter: Example:100
    # @return Object response from the API call
    def get_stats_get(startdate,
                      enddate = nil,
                      aggregated_by = nil,
                      offset = 1,
                      limit = 100)
      # Prepare query url.
      _path_url = '/stats'
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'startdate' => startdate,
          'enddate' => enddate,
          'aggregated_by' => aggregated_by,
          'offset' => offset,
          'limit' => limit
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url
      )
      CustomHeaderAuth.apply(_request)
      _context = execute_request(_request)
      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise APIException.new(
          'API Response',
          _context
        )
      elsif _context.response.status_code == 401
        raise APIException.new(
          'API Response',
          _context
        )
      elsif _context.response.status_code == 403
        raise APIException.new(
          'API Response',
          _context
        )
      elsif _context.response.status_code == 405
        raise APIException.new(
          'Invalid input',
          _context
        )
      end
      validate_response(_context)
      # Return appropriate response type.
      _context.response.raw_body
    end
  end
end
